" Personal vimrc

" start pathogen for plugin management
execute pathogen#infect()
execute pathogen#helptags()

" General settings
" ================

set nocompatible				" start with vim instead of vi
try
	colorscheme lucius			" colorscheme lucius
	LuciusDark
catch
endtry
if has('mouse')
	set mouse=a					" enable mouse
endif
set linebreak					" smart line-break
let mapleader = ","				" set leader key to ,
set swapfile					" swap file on
set dir=~/tmp					" set swap directory to ~/tmp
set term=screen-256color		" 256 color enabled for console
set t_Co=256					" 256 color enabled for console
" set timeoutlen=50				" no pause after insert mode
set ttyfast						" fast terminal
set lazyredraw
set nobackup					" auto-backup set off
set autochdir
set cursorline
set hidden						" switch between buffers without having to write
set exrc
set secure
set ruler						" show cursor position all the time
set backspace=indent,eol,start	" backspace behave in insert mode
set history=50					" number of command cache
set autoread					" autoread changed file during edit session
set encoding=utf-8				" encoding UTF-8
set relativenumber				" relative number distance from the current line
set splitbelow					" more natural splitting
set splitright					" more natural vertical splitting
syntax on						" switch syntax highlighting on
try
	set undodir=~/.vim/tmp/undodir
	set undofile				" persistent undo on, even when buffer is closed
catch
endtry

" Search settings
" ===============

set incsearch					" find next match while typing the search
set hlsearch					" highlight searches by default
set ignorecase					" smart search
set smartcase					" smart case sensitivity
set gdefault					" substitution global by default, no more need to %s/foo/bar/g => %s/foo/bar/
set showmatch					" quick jump to matching brackets on type
set showcmd						" show uncomplete command
set mousehide					" hide mouse on search

" Indentation settings
" ====================

set autoindent					" auto-indentation
" set smartindent
" set cindent						" more strict auto-indentation for c style files
set wrap
set textwidth=79
set number						" show line number
set laststatus=2				" show the status line all the time
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
" set list listchars=tab:\ \ ,eol:¬			" display tabs and trailing whitespace

" Scrolling
" =========

set scrolloff=4							" start scrolling when cursor is 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" HTML editing
" ============

set matchpairs+=<:>							" treat < and > like parenthesys
let g:html_indent_tags = 'li\|p'			" treat li and p like block tags

" Plugin settings
" ===============

" set runtimepath^=~/.vim/bundle/ctrlp.vim
" let g:ctrlp_working_path_mode = 'ra'		" ctrlp starting directory
set wildignore+=*/tmp/*,*.so,*.swp,*.zip	" ctrlp ignore list
let g:tex_flavor = 'latex'					" latex starting file
autocmd BufWritePre * :%s/\s\+$//e			" trim trail whitespace on save
set wildmenu								" enhanced command line completion
set wildmode=list:longest					" complete files like a shell
set noshowmode								" don't show which mode, disabled for airline
filetype plugin indent on

" neocomplete
" ===========
" need to recompile vim with --with-luajit and --enable-luainterp=yes --with-lua-prefix="path to lua.h"
" and export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/bin

let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.

let g:neocomplete#sources#dictionary#dictionaries = {
			\ 'default' : '',
			\ 'vimshell' : $HOME.'/.vimshell_hist',
			\ 'scheme' : $HOME.'/.gosh_completions'
			\ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
	let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Recommended key-mappings

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
	return neocomplete#close_popup() . "\<CR>"
endfunction
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

" let g:neocomplete#max_list = 10
" let g:neocomplete#enable_insert_char_pre = 1
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" omnicompletion for neocomplete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

" neosnippet
" ==========

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
			\ "<Plug>(neosnippet_expand_or_jump)"
			\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
			\ "\<Plug>(neosnippet_expand_or_jump)"
			\: "\<TAB>"

" airline
" =======

" some stats with airline
" let g:airline_section_b = '%{strftime("%c")}'
" let g:airline_section_c = '%{getcwd()}'
" let g:airline_section_b = '%b'
let g:airline_section_b = '%{getcwd()}'
let g:airline_section_y = 'b: %{bufnr("%")}'
let g:airline#extensions#whitespace#mixed_indent_algo = 1
"let g:bufferline_echo = 0
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" let g:airline_theme = 'dark'
" smart tabline
"let g:airline#extensions#tabline#enabled = 1
" vim-bufferline only on status line
"let g:airline#extensions#tabline#buffer_nr_show = 1
" syntastic settings
" set statusline+=%warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:loaded_syntastic_java_javac_checker = 1
" easymotion settings
"let g:EasyMotion_do_mapping = 0
"let g:EasyMotion_smartcase = 1
" NerdTREE settings
"let g:NERDTreeWinSize = 21
"let g:NERDTreeShowBookmarks = 1

" Keybinding settings
" ===================

" movement between buffers
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"map <Leader>j <Plug>(easymotion-j)
"map <Leader>k <Plug>(easymotion-k)
" remap keybinding for navigation and saving
nmap <c-s> :w<CR>
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
" hard-wrap paragraph
nnoremap <leader>q gqip
" some keybinding
inoremap <C-d> <esc>ddi
inoremap jk <esc>
inoremap kj <esc>
nnoremap <F5> :buffers<CR>:buffer<Space>
" disable arrow keys
" escape mode
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
" insert mode
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
" behave like normal up and down
nnoremap j gj
nnoremap k gk
" map space to / (search) and backspace to ? (backward search)
map <space> /
map <backspace> ?
" remap 0 to first non-blank character
map 0 ^
" move a line of text using ALT+[jk]
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
" copy paste utility
nmap <CR> o<Esc>
nmap <S-Enter> 0<Esc>
map <F4> "+p
" leader map
nnoremap <leader>v V`]
