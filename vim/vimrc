" Personal vimrc -- General settings
" ===================================

set nocompatible				" start with vim instead of vi
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.fzf

" fzf settings
let g:fzf_layout = { 'window': '~40%' }

call vundle#begin()

Plugin 'neomake/neomake'
Plugin 'hynek/vim-python-pep8-indent'
" Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'jonathanfilip/vim-lucius'
" Plugin 'vim-airline/vim-airline'
" Plugin 'vim-airline/vim-airline-themes'
" Plugin 'ensime/ensime-vim'
" Plugin 'derekwyatt/vim-scala'
Plugin 'Shougo/neocomplete'
Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'
Plugin 'neovimhaskell/haskell-vim'
" Plugin 'kien/ctrlp.vim'
" Plugin 'rakr/vim-one'
" Plugin 'chriskempson/tomorrow-theme'
Plugin 'chriskempson/base16-vim'

call vundle#end()
filetype plugin indent on

if has("gui_running")
    set guioptions-=T
endif
try
    colorscheme base16-apathy
    let base16colorspace=256
    " colorscheme lucius			" colorscheme lucius
    " LuciusDark
catch
endtry
if has('mouse')
    set mouse=a					" enable mouse
endif
"set linebreak					" smart line-break
let mapleader = " "				" set leader key to <space>
set nobackup
set nowb
set noswapfile
" set swapfile					" swap file on
" set dir=~/tmp					" set swap directory to ~/tmp
set term=screen-256color		" 256 color enabled for console
set t_Co=256					" 256 color enabled for console
" set timeoutlen=50				" no pause after insert mode
set ttyfast						" fast terminal
set lazyredraw
set nobackup					" auto-backup set off
set autochdir
set hidden						" switch between buffers without having to write
set exrc
set colorcolumn=95
set secure
set ruler						" show cursor position all the time
set backspace=indent,eol,start	" backspace behave in insert mode
set history=50					" number of command cache
set autoread					" autoread changed file during edit session
set encoding=utf-8				" encoding UTF-8
set relativenumber				" relative number distance from the current line
set splitbelow					" more natural splitting
set splitright					" more natural vertical splitting
set noerrorbells
set novisualbell
syntax on						" switch syntax highlighting on
try
    set undodir=~/.vim/tmp/undodir
    set undofile				" persistent undo on, even when buffer is closed
catch
endtry

if has("autocmd")
    autocmd BufReadPost * if line("'\"") | exe "'\"" | endif
endif

function s:set_cursor_line()
    set cursorline
    hi cursorline cterm=NONE
endfunction
autocmd VimEnter * call s:set_cursor_line()

" Search settings
" ===============

set incsearch					" find next match while typing the search
set hlsearch					" highlight searches by default
set ignorecase					" smart search
set smartcase					" smart case sensitivity
set gdefault					" substitution global by default, no more need to %s/foo/bar/g => %s/foo/bar/
set showmatch					" quick jump to matching brackets on type
set showcmd						" show uncomplete command
set mousehide					" hide mouse on search

" Indentation settings
" ====================

set autoindent					" auto-indentation
" set smartindent
" set cindent						" more strict auto-indentation for c style files
" set wrap
set textwidth=0
set nowrap
set number						" show line number
set laststatus=2				" show the status line all the time
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab
set list listchars=tab:\ \ ,eol:¬			" display tabs and trailing whitespace

" let loaded_matchparen = 1

" Scrolling
" =========

set scrolloff=4							" start scrolling when cursor is 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" HTML editing
" ============

set matchpairs+=<:>							" treat < and > like parenthesys
let g:html_indent_tags = 'li\|p'			" treat li and p like block tags

" Plugin settings
" ===============

" set runtimepath^=~/.vim/bundle/ctrlp.vim
" let g:ctrlp_working_path_mode = 'ra'		" ctrlp starting directory
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,.git,*.jpg,*.png,*.gif,*.pdf,*.bak	" ctrlp ignore list
let g:tex_flavor = 'latex'					" latex starting file
autocmd BufWritePre * :%s/\s\+$//e			" trim trail whitespace on save
set wildmenu								" enhanced command line completion
set wildmode=list:longest					" complete files like a shell
" set cmdheight=2
set noshowmode								" don't show which mode, disabled for airline
" au InsertEnter * hi StatusLine ctermbg=DarkBlue
" au InsertLeave * hi StatusLine ctermfg=Black ctermbg=White
set statusline=%F%m%r%h%w
set statusline+=\ [col:\ %c]
set statusline+=\ [line:\ %l\/%L][%P]
set statusline+=%=%y
set statusline+=%=\ [%{strlen(&fenc)?&fenc:&enc}]
set statusline+=%=\ [buf:\ %n]
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
autocmd! BufWritePost * Neomake " no BufEnter

let g:neomake_place_signs = 0

filetype plugin indent on

" neocomplete
" ===========
" need to recompile vim with --with-luajit and --enable-luainterp=yes --with-lua-prefix="path to lua.h"
" and export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/bin

" autocmd BufWritePost *.scala :EnTypeCheck
" nnoremap <localleader> :EnTypeCheck<CR>

let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" ctrlp settings
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'
" let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" let g:ctrlp_custom_ignore = {
"             \ 'dir': '\v[\/]\.(git|hg|svn)$',
"             \ 'file': '\v\.(exe|so|dll)$',
"             \ }
"
" Define dictionary.

let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Recommended key-mappings

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
endfunction
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

" let g:neocomplete#max_list = 10
" let g:neocomplete#enable_insert_char_pre = 1
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" omnicompletion for neocomplete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS

" neosnippet
" ==========

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "<Plug>(neosnippet_expand_or_jump)"
            \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: "\<TAB>"

" airline
" =======

" some stats with airline
" let g:airline_section_b = '%{strftime("%c")}'
" let g:airline_section_c = '%{getcwd()}'
" let g:airline_section_b = '%b'
" let g:airline_section_b = '%{getcwd()}'
" let g:airline_section_y = 'b: %{bufnr("%")}'
" let g:airline#extensions#whitespace#mixed_indent_algo = 1
"let g:bufferline_echo = 0
" if !exists('g:airline_symbols')
"     let g:airline_symbols = {}
" endif
" powerline symbols
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_alt_sep = ''
" let g:airline_symbols.branch = ''
" let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = ''

" let g:airline_theme = 'lucius'
" let g:airline_theme = 'base16-apathy'
" let g:one_allow_italics = 1
" smart tabline
"let g:airline#extensions#tabline#enabled = 1
" vim-bufferline only on status line
"let g:airline#extensions#tabline#buffer_nr_show = 1
" syntastic settings
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" easymotion settings
"let g:EasyMotion_do_mapping = 0
"let g:EasyMotion_smartcase = 1
" NerdTREE settings
"let g:NERDTreeWinSize = 21
"let g:NERDTreeShowBookmarks = 1

" Keybinding settings
" ===================

" movement between buffers
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"map <Leader>j <Plug>(easymotion-j)
"map <Leader>k <Plug>(easymotion-k)
" remap keybinding for navigation and saving
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
" hard-wrap paragraph
nnoremap <leader>q gqip
" some keybinding
inoremap <C-d> <esc>ddi
inoremap jk <esc>
inoremap kj <esc>
nnoremap <F5> :buffers<CR>:buffer<Space>
" disable arrow keys
" escape mode
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
" insert mode
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>
" behave like normal up and down
nnoremap j gj
nnoremap k gk
" remap 0 to first non-blank character
map 0 ^
" move a line of text using ALT+[jk]
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
" copy paste utility
nmap <CR> o<Esc>
nmap <S-Enter> 0<Esc>
map <F4> "+p
" leader map
nnoremap <leader>v V`]
nnoremap <leader>i gg=G``
nnoremap <leader>, :noh<cr>
nmap <leader>d :bd<cr>
nmap <leader>D :bufdo bd<cr>
" nnoremap <leader><leader> <c-^>
nnoremap <leader>ll :lopen<cr>
nnoremap <leader>lc :lclose<cr>

nnoremap <silent> <leader><space> :Files<CR>
nnoremap <silent> <leader>b :Buffers<CR>

map \ :NERDTreeToggle<CR>
" sudo save file
command W w !sudo tee %> /dev/null

" C programming
set makeprg=make\ -C\ ../build\ -j9

" Python programming
au BufNewFile,BufRead *.py
            \ set tabstop=4 |
            \ set softtabstop=4 |
            \ set shiftwidth=4 |
            \ set textwidth=79 |
            \ set expandtab |
            \ set autoindent |
            \ set fileformat=unix |
